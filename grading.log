clang -c -o parse.o parse.c -I. -g -Wall --std=gnu11 -fpic
clang -c -o machine.o machine.c -I. -g -Wall --std=gnu11 -fpic
clang -c -o instructions.o instructions.c -I. -g -Wall --std=gnu11 -fpic
clang -c -o code.o code.c -I. -g -Wall --std=gnu11 -fpic
clang -c -o simulator.o simulator.c -I. -g -Wall --std=gnu11 -fpic
clang -o simulator parse.o machine.o instructions.o code.o simulator.o 
clang -c -o test_parse.o test_parse.c -I. -g -Wall --std=gnu11 -fpic
clang -o test_parse parse.o machine.o instructions.o code.o test_parse.o 
clang -c -o test_instructions.o test_instructions.c -I. -g -Wall --std=gnu11 -fpic
clang -o test_instructions parse.o machine.o instructions.o code.o test_instructions.o 
clang -c -o test_functions.o test_functions.c -I. -g -Wall --std=gnu11 -fpic
clang -o test_functions parse.o machine.o instructions.o code.o test_functions.o 
rm test_parse.o test_functions.o test_instructions.o
clang -shared -o libsimulator.so parse.o machine.o instructions.o code.o 
=== Instruction with register operands (01a) ===================================
Test complete
=== PASS (3/3) =================================================================

=== Instruction with constant operand (01b) ====================================
Test complete
=== PASS (2/2) =================================================================

=== Instruction with memory reference (01c) ====================================
Test complete
=== PASS (3/3) =================================================================

=== Instruction with offset memory reference (01d) =============================
Test complete
=== PASS (2/2) =================================================================

=== Instruction with function (01e) ============================================
Test complete
=== PASS (2/2) =================================================================

=== sub (02a) ==================================================================
sub x1 x2 x3 
Registers:
	x1 = 0x1100330055
	x2 = 0x1122334455
	x3 = 0x22004400
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== neg (02b) ==================================================================
neg x1 x2 
Registers:
	x1 = 0xffffffeeddccbbab
	x2 = 0x1122334455
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== mul (02c) ==================================================================
mul x1 x2 x3 
Registers:
	x1 = 0xc0
	x2 = 0x10
	x3 = 0xc
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== div (02d) ==================================================================
sdiv x1 x2 x3 
Registers:
	x1 = 0x4
	x2 = 0x20
	x3 = 0x8
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (1/1) =================================================================

=== lsl (02e) ==================================================================
lsl x1 x2 x3 
Registers:
	x1 = 0x10
	x2 = 0x1
	x3 = 0x4
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== lsr (02f) ==================================================================
lsr x1 x2 x3 
Registers:
	x1 = 0x1f
	x2 = 0x1fff
	x3 = 0x8
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (1/1) =================================================================

=== and (02g) ==================================================================
and x1 x2 x3 
Registers:
	x1 = 0x1000
	x2 = 0x1234
	x3 = 0x1100
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== orr (02h) ==================================================================
orr x1 x2 x3 
Registers:
	x1 = 0x1334
	x2 = 0x1234
	x3 = 0x1100
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (1/1) =================================================================

=== ldr (02i) ==================================================================
ldr x1 [sp] 
Registers:
	x1 = 0x1122334455
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 55 44 33 22 11 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== str (02j) ==================================================================
str w1 [sp,#4] 
Registers:
	x1 = 0x667788
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 88 77 66 00 |
	           +-------------------------+
Test complete
=== PASS (1/1) =================================================================

=== mov (02k) ==================================================================
mov x1 x2 
Registers:
	x1 = 0x1234
	x2 = 0x1234
	sp = 0xff00
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== bl (03a) ===================================================================
bl 400ABC <test> 
Registers:
	sp = 0xff00
	pc = 0x400abc
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== ret (03b) ==================================================================
ret 
Registers:
	sp = 0xff00
	pc = 0x400468
Stack:
	      sp-> +-------------------------+
	0x0000ff00 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== str store-only (04a) =======================================================
stp x1 x2 [sp] 
	Store-only
	str x1 [sp] 
	str x2 [sp,#8] 
Registers:
	x1 = 0x1133557799
	x2 = 0x2244668800
	sp = 0xff90
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 88 66 44 22 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== str update-then-store (04b) ================================================
stp x1 x2 [sp,#-16] 
	Update-then-store
	add sp sp #-16 
Registers:
	sp = 0xff90
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff90 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	str x1 [sp] 
Registers:
	x1 = 0x1133557799
	sp = 0xff90
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	str x2 [sp,#8] 
Registers:
	x1 = 0x1133557799
	x2 = 0x2244668800
	sp = 0xff90
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 88 66 44 22 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== str store-then-update (04c) ================================================
stp x1 x2 [sp] #-16 
	Store-then-update
	str x1 [sp] 
Registers:
	x1 = 0x1133557799
	sp = 0xff90
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 90 78 06 89 67 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	str x2 [sp,#8] 
	add sp sp #-16 
Registers:
	x1 = 0x1133557799
	x2 = 0x2244668800
	sp = 0xff80
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff80 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000ff88 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 88 66 44 22 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Registers:
	x1 = 0x1133557799
	x2 = 0x2244668800
	sp = 0xff80
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff80 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000ff88 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 88 66 44 22 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (2/2) =================================================================

=== ldp update-then-load (04d) =================================================
ldp x1 x2 [sp,#16]! 
	Update-then-load
addr[0]:sp and addr[1]:#16]!
	add sp sp #16]! 
Registers:
	sp = 0xff90
	pc = 0x0
Stack:
	           +-------------------------+
	0x0000ff80 | 45 23 51 34 12 00 00 00 |
	           +-------------------------+
	0x0000ff88 | 90 78 06 89 67 00 00 00 |
	      sp-> +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 88 66 44 22 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	ldr x1 [sp 
Registers:
	x1 = 0x1133557799
	sp = 0xff90
	pc = 0x0
Stack:
	           +-------------------------+
	0x0000ff80 | 45 23 51 34 12 00 00 00 |
	           +-------------------------+
	0x0000ff88 | 90 78 06 89 67 00 00 00 |
	      sp-> +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 88 66 44 22 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	ldr x2 [sp,#8] 
Registers:
	x1 = 0x1133557799
	x2 = 0x2244668800
	sp = 0xff90
	pc = 0x0
Stack:
	           +-------------------------+
	0x0000ff80 | 45 23 51 34 12 00 00 00 |
	           +-------------------------+
	0x0000ff88 | 90 78 06 89 67 00 00 00 |
	      sp-> +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 88 66 44 22 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (1/1) =================================================================

=== ldp load-then-update (04e) =================================================
ldp x1 x2 [sp] #16 
	Load-then-update
	ldr x1 [sp] 
Registers:
	x1 = 0x1234512345
	sp = 0xff80
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff80 | 45 23 51 34 12 00 00 00 |
	           +-------------------------+
	0x0000ff88 | 90 78 06 89 67 00 00 00 |
	           +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 88 66 44 22 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	ldr x2 [sp,#8] 
Registers:
	x1 = 0x1234512345
	x2 = 0x6789067890
	sp = 0xff80
	pc = 0x0
Stack:
	      sp-> +-------------------------+
	0x0000ff80 | 45 23 51 34 12 00 00 00 |
	           +-------------------------+
	0x0000ff88 | 90 78 06 89 67 00 00 00 |
	           +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 88 66 44 22 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
	add sp sp #16 
Registers:
	x1 = 0x1234512345
	x2 = 0x6789067890
	sp = 0xff90
	pc = 0x0
Stack:
	           +-------------------------+
	0x0000ff80 | 45 23 51 34 12 00 00 00 |
	           +-------------------------+
	0x0000ff88 | 90 78 06 89 67 00 00 00 |
	      sp-> +-------------------------+
	0x0000ff90 | 99 77 55 33 11 00 00 00 |
	           +-------------------------+
	0x0000ff98 | 00 88 66 44 22 00 00 00 |
	           +-------------------------+
	0x0000ffa0 | 00 00 00 00 00 00 00 00 |
	           +-------------------------+
Test complete
=== PASS (1/1) =================================================================

=== Code compiles without warnings (05a) =======================================
=== PASS (3/3) =================================================================

=== Contains comments (05b) ====================================================
parse.c
+    test = (char**)malloc(sizeof(char*)*20); //malloc the whole array 
+       test[i] = (char*)malloc(sizeof(char)*20); //malloc each part of the array
+        // TEST FOR EACH SECTION
+        //printf("%c\n", instruction[x]);
+            //Puts the string into the array
+            // TEST FOR INSTR_COUNT and ITEM IN COUNT
+            // printf("%s\n", test[instruction_count]);
+            // printf("instruction count: %d\n\n", instruction_count);
+            //REST STRING
+    //SETTING THE ADDRESS || SECOND OPERAND
+    //SETTING THE LAST STRING TO NULL
+    //printf("The instruction count: %d\n", instruction_count);
+    // TESTS FOR ALL PARTS
+    // printf("\nThe returned opcode: %s\n", test[0]);
+    // printf("\nThe returned destination: %s\n", test[1]);
+    // printf("\nThe first operand: %s\n", test[2]);
+    // printf("\nThe rsecond operand || parse address: %s\n", test[3]);
+    // printf("\nThe NULL: %s\n", test[4]);
+    // printf("\n");
instructions.c
+//char *bl[] = {"bl", "400ABC", "<test>", NULL};
+    //--> D1 = *(X0), D2 = *(X0+8) 
+    //(loads the value at X0 and X0+8 into registers D1 and D2 respectively)
+    //e.g. ldp D1, D2, [X0, #0x10]! 
+    // --> X0 = X0 + 0x10, then sets D1 = *(X0), D2 = *(X0+8)
+        // Updates value using constant // X0 = X0 + 0x10
+        // Load the first value //D1 = *(X0)
+        // Load the second value //D2 = *(X0+8),
+    //e.g. ldp D1, D2, [X0], #0x10
+        // Load the first value //D1 = *(X0)
+        // Load the second value //D2 = *(X0+8),
+        // Updates value using constant // X0 = X0 + 0x10
+        // Store the first value //*(X0) = D1
+        // Store the second value //*(X0+8) = D2
+    //e.g. stp D1, D2, [X0, #-16]!
+        // Update value using constant // X0 = X0 - 16
+        sprintf(constant, "%s", addr[1]); //addr[] = {x0, #-16};
+        // Store the first value //*(X0) = D1
+        // Store the second value //*(X0+8) = D2
+    //e.g. stp D1, D2, [X0], #-16
+        // Store the first value //D1 = *(X0)
+        // Store the second value //D2 = *(X0+8),
+        // Updates value using constant // X0 = X0 -16
=== MANUAL (?/3) ===============================================================

=== Multiple commits to git repo (05c) =========================================
=== PASS (2/2) =================================================================

